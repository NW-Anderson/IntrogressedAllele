}
library(plotfunctions)
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
##### Fig 1 #####
par(mfrow = c(2,2), mar = c(4,4,6,6) + .1)
# trees <- trees(pars = c(3,1),
#                        type = "bd",
#                        n = 1,
#                        max.taxa = 30,
#                        include.extinct = F)[[1]]
# trees$edge.length <- trees$edge.length / max(branching.times(trees))
# cont.trait <- sim.char(trees, 0.2, model = 'BM')
# names(cont.trait) <- trees$tip.label
load('../Data/Fig1Tree.RData')
load('../Data/Fig1ContTrait.RData')
smp <- contMap(trees,cont.trait, ftype = 'off', legend = F, lims = c(.24,2), plot = F)
n<-length(smp$cols)
## change to grey scale
smp$cols[1:n]<-rainbow(n, end = 4/6)
plot(smp, legend = F,ftype = 'off')
gradientLegend(depth = .03, valRange = c(.24,2), side = 1, pos = .17, color = rainbow(n, end = 4/6))
legend(x = 'bottomleft', legend = '', title = '              Cont Trait Value', bg="transparent", bty = 'n')
fig_label('A',cex = 2.5)
# cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# branch.means <- c()
# branch.names <- c()
# for(j in 1:nrow(trees$edge)){
#   node.o.int <- trees$edge[j,1]
#   if(node.o.int <= 30){
#     one <- cont.trait[node.o.int]
#   }else{
#     one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
#   }
#   node.o.int <- trees$edge[j,2]
#   if(node.o.int <= 30){
#     two <- cont.trait[node.o.int]
#   }else{
#     two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
#   }
#   branch.means <- c(branch.means, mean(one, two))
#   branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
# }
# names(branch.means) <- branch.names
# rm(branch.names)
# upper <- summary(branch.means)[[5]]
# lower <- summary(branch.means)[[2]]
# scale.factor <- 50
# alt.tree <- trees
# for(j in 1:length(branch.means)){
#   if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
#   if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
# }
# good.sim <- F
# rate <- .2
# while(good.sim == F){
#   disc.trait <- sim.char(phy = trees,
#                          par = matrix(c(-rate, 0, rate, 0), 2),
#                          model = 'discrete',
#                          root = 1)
#   if(4 < sum(disc.trait == min(disc.trait)) &&
#      sum(disc.trait == min(disc.trait)) < 26){
#     good.sim <- T
#   }
# }
# names(disc.trait) <- trees$tip.label
# anc.state.dt <- make.simmap(trees, disc.trait,
#                             model = matrix(c(0,0,1,0), 2),
#                             nsim = 1,
#                             pi = c(1,0),
#                             message = F)
load('../Data/Fig1DiscSimMap.RData')
plotSimmap(anc.state.dt, lwd = 4, ftype = 'off')
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15, bty = 'n')
fig_label('B',cex = 2.5)
pies <- array(dim = c(anc.state.dt$Nnode, 3))
pies[1:4,] <- rep.row(c(1,0,0),4)
pies[5,] <- t(c(0,0,1))
pies[6:7,] <- rep.row(c(0,1,0),2)
pies[8:11,] <- rep.row(c(1,0,0),4)
pies[12,] <- t(c(0,0,1))
pies[13:20,] <- rep.row(c(1,0,0),8)
pies[21,] <- t(c(0,0,1))
pies[22:23,] <- rep.row(c(0,1,0),2)
pies[24:29,] <- rep.row(c(1,0,0),6)
# plot(trees, tip.color = 'transparent', edge.width = 3)
plotSimmap(anc.state.dt, lwd = 4, ftype = 'off')
nodelabels(pie = pies, piecol = c('blue','green', 'red'),cex = .8)
legend(x = 'bottomleft', legend = c('Ancestral','Producing (Ancestral)','Derived'),
col = c('blue', 'red','green'), pch = 16, bg="transparent", bty = 'n')
fig_label('C',cex = 2.5)
ss_nodes <- anc.state.dt$mapped.edge[, 1] > 0 &
anc.state.dt$mapped.edge[, 2] > 0
wanted_branches <- ss_nodes[ss_nodes == T]
wanted_nodes <- names(wanted_branches)
wanted_nodes <- gsub(",.*", "", wanted_nodes)
producing.nodes <- unique(wanted_nodes)
anc.states <- anc.ML(trees, cont.trait, model = "BM")
orig.val <- mean(anc.states$ace[names(anc.states$ace) %in% producing.nodes])
null.orig.val <- vector(length = 1000)
number.of.trans <- length(producing.nodes)
anc.dt <- anc.state.dt
anc.ct <- anc.states
node.states <- describe.simmap(anc.dt)$states
anc.cond.nodes <- anc.ct$ace[names(anc.ct$ace) %in% names(node.states)[node.states != '2']]
for (j in 1:1000){
# set.seed(j)
null.orig.val[j] <- mean(sample(anc.cond.nodes,
length(producing.nodes)))
}
par(mar = c(5,5,1,1) + .1)
plot(density(null.orig.val, bw = .025), ylab = 'Frequency', xlab = 'Mean Cont Trait', main = '')
abline(v = orig.val, col = 'red')
legend(x = 'topright', legend = c('Observed','Null'), col = c('red', 'black'), pch = 15, bty = 'n')
fig_label('D',cex = 2.5)
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
rep.row<-function(x,n){
matrix(rep(x,each=n),nrow=n)
}
library(plotfunctions)
library(R.utils)
library(phytools)
library(diversitree)
library(geiger)
library(doSNOW)
library(foreach)
##### Fig 1 #####
par(mfrow = c(2,2), mar = c(4,4,6,6) + .1)
# trees <- trees(pars = c(3,1),
#                        type = "bd",
#                        n = 1,
#                        max.taxa = 30,
#                        include.extinct = F)[[1]]
# trees$edge.length <- trees$edge.length / max(branching.times(trees))
# cont.trait <- sim.char(trees, 0.2, model = 'BM')
# names(cont.trait) <- trees$tip.label
load('../Data/Fig1Tree.RData')
load('../Data/Fig1ContTrait.RData')
smp <- contMap(trees,cont.trait, ftype = 'off', legend = F, lims = c(.24,2), plot = F)
n<-length(smp$cols)
## change to grey scale
smp$cols[1:n]<-rainbow(n, end = 4/6)
plot(smp, legend = F,ftype = 'off')
gradientLegend(depth = .03, valRange = c(.24,2), side = 1, pos = .17, color = rainbow(n, end = 4/6))
legend(x = 'bottomleft', legend = '', title = '              Cont Trait Value', bg="transparent", bty = 'n')
fig_label('A',cex = 2.5)
# cont.trait.AC <- anc.ML(trees, cont.trait, model = "BM")
# branch.means <- c()
# branch.names <- c()
# for(j in 1:nrow(trees$edge)){
#   node.o.int <- trees$edge[j,1]
#   if(node.o.int <= 30){
#     one <- cont.trait[node.o.int]
#   }else{
#     one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
#   }
#   node.o.int <- trees$edge[j,2]
#   if(node.o.int <= 30){
#     two <- cont.trait[node.o.int]
#   }else{
#     two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
#   }
#   branch.means <- c(branch.means, mean(one, two))
#   branch.names <- c(branch.names, paste(as.character(trees$edge[j,1]),as.character(trees$edge[j,2])))
# }
# names(branch.means) <- branch.names
# rm(branch.names)
# upper <- summary(branch.means)[[5]]
# lower <- summary(branch.means)[[2]]
# scale.factor <- 50
# alt.tree <- trees
# for(j in 1:length(branch.means)){
#   if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
#   if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
# }
# good.sim <- F
# rate <- .2
# while(good.sim == F){
#   disc.trait <- sim.char(phy = trees,
#                          par = matrix(c(-rate, 0, rate, 0), 2),
#                          model = 'discrete',
#                          root = 1)
#   if(4 < sum(disc.trait == min(disc.trait)) &&
#      sum(disc.trait == min(disc.trait)) < 26){
#     good.sim <- T
#   }
# }
# names(disc.trait) <- trees$tip.label
# anc.state.dt <- make.simmap(trees, disc.trait,
#                             model = matrix(c(0,0,1,0), 2),
#                             nsim = 1,
#                             pi = c(1,0),
#                             message = F)
load('../Data/Fig1DiscSimMap.RData')
plotSimmap(anc.state.dt, lwd = 4, ftype = 'off')
legend(x = 'bottomleft', legend = c('Ancestral','Derived'), col = c('black', 'red'), pch = 15, bty = 'n')
fig_label('B',cex = 2.5)
pies <- array(dim = c(anc.state.dt$Nnode, 3))
pies[1:4,] <- rep.row(c(1,0,0),4)
pies[5,] <- t(c(0,0,1))
pies[6:7,] <- rep.row(c(0,1,0),2)
pies[8:11,] <- rep.row(c(1,0,0),4)
pies[12,] <- t(c(0,0,1))
pies[13:20,] <- rep.row(c(1,0,0),8)
pies[21,] <- t(c(0,0,1))
pies[22:23,] <- rep.row(c(0,1,0),2)
pies[24:29,] <- rep.row(c(1,0,0),6)
# plot(trees, tip.color = 'transparent', edge.width = 3)
plotSimmap(anc.state.dt, lwd = 4, ftype = 'off')
nodelabels(pie = pies, piecol = c('blue','green', 'red'),cex = .8)
legend(x = 'bottomleft', legend = c('Ancestral','Producing (Ancestral)','Derived'),
col = c('blue', 'red','green'), pch = 16, bg="transparent", bty = 'n')
fig_label('C',cex = 2.5)
ss_nodes <- anc.state.dt$mapped.edge[, 1] > 0 &
anc.state.dt$mapped.edge[, 2] > 0
wanted_branches <- ss_nodes[ss_nodes == T]
wanted_nodes <- names(wanted_branches)
wanted_nodes <- gsub(",.*", "", wanted_nodes)
producing.nodes <- unique(wanted_nodes)
anc.states <- anc.ML(trees, cont.trait, model = "BM")
orig.val <- mean(anc.states$ace[names(anc.states$ace) %in% producing.nodes])
null.orig.val <- vector(length = 1000)
number.of.trans <- length(producing.nodes)
anc.dt <- anc.state.dt
anc.ct <- anc.states
node.states <- describe.simmap(anc.dt)$states
anc.cond.nodes <- anc.ct$ace[names(anc.ct$ace) %in% names(node.states)[node.states != '2']]
for (j in 1:1000){
# set.seed(j)
null.orig.val[j] <- mean(sample(anc.cond.nodes,
length(producing.nodes)))
}
par(mar = c(5,5,1,1) + .1)
plot(density(null.orig.val, bw = .025), ylab = 'Frequency', xlab = 'Mean Cont Trait', main = '')
abline(v = orig.val, col = 'red')
legend(x = 'topright', legend = c('Observed','Null'), col = c('red', 'black'), pch = 15, bty = 'n')
fig_label('D',cex = 2.5)
?rcoal
??rdcoal
??rcoal
install.packages("doSNOW")
install.packages("doMPI")
install.packages("Rmpi")
source('~/GitHub/FOY/Analysis/StochasticInternalFunctions.R')
##### parameters  #####
library(doSNOW)
cl<-makeCluster(3)
library(Rmpi)
install.packages('Rmpi')
library(Rmpi)
library(profvis)
?profvis
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
setwd("~/GitHub/IntrogressedAllele/R")
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-5
num = 100
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
profvis({
GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
})
profvis({
GetExp(n = 10,
par = par,
pop = pop,
tol = tol,
num = num)
})
exact <- vector(length = 50)
for(n in 1:50){
cat(n,'\n')
exact <- GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
}
GetExp(n = 30,
par = par,
pop = pop,
tol = tol,
num = num)
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
GetExp(n = 30,
par = par,
pop = pop,
tol = tol,
num = num)
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
profvis({
GetExp(n = 50,
par = par,
pop = pop,
tol = tol,
num = num)
})
profvis({
GetExp(n = 20,
par = par,
pop = pop,
tol = tol,
num = num)
})
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
n = 20
profvis({
coeff<- 1/(1-GetPGF(0,n,pop,par))
APP = 0
i = 1
a = c()
TOL = c()
h = c()
FA = c()
FC = c()
FB = c()
S = c()
L = c()
a[i] = 0
TOL[i] = 10*tol
h[i] = .5
FA[i] = GetPGF(0,n,pop,par)
FC[i] = GetPGF(.5, n, pop, par)
FB[i] = GetPGF(1, n, pop, par)
S[i] = h[i]*(FA[i] + 4*FC[i]+FB[i])/3
L[i] = 1
v = c()
while(i>0){
FD = GetPGF(a[i] + (h[i])/2, n, pop, par)
FE = GetPGF(a[i] + (3*h[i])/2, n, pop, par)
S1 = h[i]*(FA[i] + 4*FD + FC[i])/6
S2 = h[i]*(FC[i] + 4*FE + FB[i])/6
v[1] = a[i]
v[2] = FA[i]
v[3] = FC[i]
v[4] = FB[i]
v[5] = h[i]
v[6] = TOL[i]
v[7] = S[i]
v[8] = L[i]
i = i-1
if(abs(S1+S2-v[7])<v[6]){
APP = APP + (S1+S2)
}else{
if(v[8] >= num){
print("LEVEL EXCEEDED")
break
}else{
i = i+1
a[i] = v[1]+v[5]
FA[i] = v[3]
FC[i] = FE
FB[i] = v[4]
h[i] = v[5]/2
TOL[i] = v[6]/2
S[i] = S2
L[i] = v[8] + 1
i = i+1
a[i] = v[1]
FA[i] = v[2]
FC[i] = FD
FB[i] = v[3]
h[i] = h[i-1]
TOL[i] = TOL[i-1]
S[i] = S1
L[i] = L[i-1]
}
}
}
})
library(profvis)
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
library(profvis)
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
ngen <- 30
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(1000,20,      .95,    1,      .1,     1,      .1,     12,      .5,    .05,.5)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
exact <- vector(length = ngen)
for(n in 1:ngen){
cat(n,'\n')
exact[n] <- GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
}
plot(aprx, type = 'l')
lines(exact, col = 'red')
View(DoMatrixApprox)
n=1
exact[n] <- GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
coeff<- 1/(1-GetPGF(0,n,pop,par))
APP = 0
i = 1
a = c()
TOL = c()
h = c()
FA = c()
FC = c()
FB = c()
S = c()
L = c()
a[i] = 0
GetPGF(0,n,pop,par)
source('~/GitHub/IntrogressedAllele/R/GetPGF.R')
?legend
