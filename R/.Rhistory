source('GetExp.R')
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-5
num = 100
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
profvis({
GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
})
profvis({
GetExp(n = 10,
par = par,
pop = pop,
tol = tol,
num = num)
})
exact <- vector(length = 50)
for(n in 1:50){
cat(n,'\n')
exact <- GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
}
GetExp(n = 30,
par = par,
pop = pop,
tol = tol,
num = num)
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
GetExp(n = 30,
par = par,
pop = pop,
tol = tol,
num = num)
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
profvis({
GetExp(n = 50,
par = par,
pop = pop,
tol = tol,
num = num)
})
profvis({
GetExp(n = 20,
par = par,
pop = pop,
tol = tol,
num = num)
})
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
n = 20
profvis({
coeff<- 1/(1-GetPGF(0,n,pop,par))
APP = 0
i = 1
a = c()
TOL = c()
h = c()
FA = c()
FC = c()
FB = c()
S = c()
L = c()
a[i] = 0
TOL[i] = 10*tol
h[i] = .5
FA[i] = GetPGF(0,n,pop,par)
FC[i] = GetPGF(.5, n, pop, par)
FB[i] = GetPGF(1, n, pop, par)
S[i] = h[i]*(FA[i] + 4*FC[i]+FB[i])/3
L[i] = 1
v = c()
while(i>0){
FD = GetPGF(a[i] + (h[i])/2, n, pop, par)
FE = GetPGF(a[i] + (3*h[i])/2, n, pop, par)
S1 = h[i]*(FA[i] + 4*FD + FC[i])/6
S2 = h[i]*(FC[i] + 4*FE + FB[i])/6
v[1] = a[i]
v[2] = FA[i]
v[3] = FC[i]
v[4] = FB[i]
v[5] = h[i]
v[6] = TOL[i]
v[7] = S[i]
v[8] = L[i]
i = i-1
if(abs(S1+S2-v[7])<v[6]){
APP = APP + (S1+S2)
}else{
if(v[8] >= num){
print("LEVEL EXCEEDED")
break
}else{
i = i+1
a[i] = v[1]+v[5]
FA[i] = v[3]
FC[i] = FE
FB[i] = v[4]
h[i] = v[5]/2
TOL[i] = v[6]/2
S[i] = S2
L[i] = v[8] + 1
i = i+1
a[i] = v[1]
FA[i] = v[2]
FC[i] = FD
FB[i] = v[3]
h[i] = h[i-1]
TOL[i] = TOL[i-1]
S[i] = S1
L[i] = L[i-1]
}
}
}
})
library(profvis)
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
library(profvis)
source('DoMatrix.R')
source('GetPGF.R')
source('GetExp.R')
ngen <- 30
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(1000,20,      .95,    1,      .1,     1,      .1,     12,      .5,    .05,.5)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       20,      .1,    1,       .5,  .5,    12,      .05)
pop = 1000
tol = 10^-3
num = 100
exact <- vector(length = ngen)
for(n in 1:ngen){
cat(n,'\n')
exact[n] <- GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
}
plot(aprx, type = 'l')
lines(exact, col = 'red')
View(DoMatrixApprox)
n=1
exact[n] <- GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
GetExp(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
coeff<- 1/(1-GetPGF(0,n,pop,par))
APP = 0
i = 1
a = c()
TOL = c()
h = c()
FA = c()
FC = c()
FB = c()
S = c()
L = c()
a[i] = 0
GetPGF(0,n,pop,par)
source('~/GitHub/IntrogressedAllele/R/GetPGF.R')
?legend
setwd("~/GitHub/IntrogressedAllele/R")
load("~/GitHub/IntrogressedAllele/R/run1.RData")
plot(aprx, type = 'l',ylim = c(0,1), xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(exact, col = 'red', lwd = 2)
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(times, type = 'l', xlab = 'Generation', ylab = 'Runtime', lwd = 2,
main = 'Runtime Over Time')
load("~/GitHub/IntrogressedAllele/R/run1.RData")
plot(aprx, type = 'l',ylim = c(0,1), xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(exact, col = 'red', lwd = 2)
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(times, type = 'l', xlab = 'Generation', ylab = 'Runtime', lwd = 2,
main = 'Runtime Over Time')
library(doSNOW)
library(foreach)
source('DoMatrix.R')
source('DoExact.R')
cl<-makeCluster(7, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
ngen <- 40
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(1000,22.155,      .95,    1,      .1,     1,      .1,     12,     .5,    .05,.5)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       22.155,   .1,    1,       .5,  .5,    12,    .05)
pop = 1000
tol = 10^-3
num = 100
results <- array(dim = c(ngen, 3))
colnames(results) <- c('freq', 'time')
results <- foreach(n = 1:ngen, .options.multicore=opts, .combine = 'rbind') %dopar% {
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
bins <- exact[1]
exact <- exact[2]
end <- Sys.time()
times <- end - start
res <- c(exact, times,bins)
}
results <- array(dim = c(ngen, 3))
colnames(results) <- c('freq', 'time','bins')
results <- foreach(n = 1:ngen, .options.multicore=opts, .combine = 'rbind') %dopar% {
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
bins <- exact[1]
exact <- exact[2]
end <- Sys.time()
times <- end - start
res <- c(exact, times,bins)
}
n=1
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
bins <- exact[1]
exact <- exact[2]
end <- Sys.time()
times <- end - start
res <- c(exact, times,bins)
results <- array(dim = c(ngen, 3))
colnames(results) <- c('freq', 'time','bins')
results <- foreach(n = 1:ngen, .options.multicore=opts, .combine = 'rbind') %dopar% {
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
bins <- exact[1]
exact <- exact[2]
end <- Sys.time()
times <- end - start
res <- c(exact, times,bins)
}
results <- array(dim = c(ngen, 3))
colnames(results) <- c('freq', 'time','bins')
results <- foreach(n = 1:ngen, .options.multicore=opts, .combine = 'rbind') %dopar% {
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
bins <- exact[1]
exact <- exact[2]
end <- Sys.time()
times <- end - start
res <- c(exact, times,bins)
res
}
exact <- results[,1]
times <- results[,2]
bins <- results[,3]
plot(aprx, type = 'l',ylim = c(0,1), xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(exact, col = 'red', lwd = 2)
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(times, type = 'l', xlab = 'Generation', ylab = 'Runtime', lwd = 2,
main = 'Runtime Over Time')
plot(exact ~ times, type = 'l', lwd = 2, main = 'Frequency vs Runtime')
plot(times~exact, type = 'l', lwd = 2, main = 'Frequency vs Runtime')
plot(times~bins,type = 'l', lwd = 2, main = 'Bins vs Runtime')
plot(times~bins, main = 'Bins vs Runtime')
plot(times~exact, type = 'l', lwd = 2, main = 'Frequency vs Runtime')
lines(bins~exact, col = 'red', lwd = 2)
plot(aprx, type = 'l',ylim = c(0,1), xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(exact, col = 'red', lwd = 2)
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(times, type = 'l', xlab = 'Generation', ylab = 'Runtime', lwd = 2,
main = 'Runtime Over Time')
lines(bins, col = 'red, lwd = 2')
lines(bins, col = 'red', lwd = 2)
plot(times~exact, type = 'l', lwd = 2, main = 'Frequency vs Runtime')
lines(bins~exact, col = 'red', lwd = 2)
plot(times~bins, main = 'Bins vs Runtime')
end - start
times
times[1]
sum(times)
sum(times)/60
??pscl
library(doSNOW)
library(foreach)
source('DoMatrix.R')
source('DoExact.R')
cl<-makeCluster(7, type="SOCK")
on.exit(stopCluster(cl))
opts <- list(preschedule = FALSE)
registerDoSNOW(cl)
ngen <- 40
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(10000,22.155,      .95,    1,      .1,     1,      .1,     12,     .5,    .05,.5)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.95,   .1,    1,       22.155,   .1,    1,       .5,  .5,    12,    .05)
pop = 1000
tol = 10^-3
num = 100
results <- array(dim = c(ngen, 3))
colnames(results) <- c('freq', 'time','bins')
results <- foreach(n = 1:ngen, .options.multicore=opts, .combine = 'rbind') %dopar% {
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num)
bins <- exact[1]
exact <- exact[2]
end <- Sys.time()
times <- end - start
res <- c(exact, times,bins)
res
}
exact <- results[,1]
times <- results[,2]
bins <- results[,3]
plot(aprx, type = 'l',ylim = c(0,1), xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(exact, col = 'red', lwd = 2)
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(times, type = 'l', xlab = 'Generation', ylab = 'Runtime', lwd = 2,
main = 'Runtime Over Time')
lines(bins, col = 'red', lwd = 2)
plot(times~exact, type = 'l', lwd = 2, main = 'Frequency vs Runtime')
lines(bins~exact, col = 'red', lwd = 2)
plot(times~bins, main = 'Bins vs Runtime')
plot(aprx, type = 'l',ylim = c(0,1), xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(exact, col = 'red', lwd = 2)
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(times, type = 'l', xlab = 'Generation', ylab = 'Runtime', lwd = 2,
main = 'Runtime Over Time')
lines(bins, col = 'red', lwd = 2)
plot(times~exact, type = 'l', lwd = 2, main = 'Frequency vs Runtime')
lines(bins~exact, col = 'red', lwd = 2)
plot(times~bins, main = 'Bins vs Runtime')
data <- read.csv(file = 'offspring info.xlsx')
data <- read.csv(file = 'offspring info.csv')
View(data)
data <- read.csv(file = 'offspring info.csv', col.names = T)
data <- read.csv(file = 'offspring info.csv')
View(data)
colnames(data)
cbind(data[,1:5], data[,6:10])
data <- cbind(data[,1:5], data[,6:10])
data <- read.csv(file = 'offspring info.csv')
data <- cbind(data[,1:5], data[,6:10])
View(data)
data[,1:5]
data[,6:10]
data <- rbind(data[,1:5], data[,6:10])
colnames(data)[6:10] <- colnames(data)[1:5]
data <- rbind(data[,1:5], data[,6:10])
data <- read.csv(file = 'offspring info.csv')
View(data)
data <- data[!is.na(data[,1]),]
View(data)
hist(data$Calves.sired)
?hist
range(data$Calves.sired)
hist(data$Calves.sired, breaks = max(data$Calves.sired))
table(data$Calves.sired)
require(pscl)
require(boot)
summary(m1 <- zeroinfl(Calves.sired ~ Year.of.rut | Sire.age, data = zinb))
install.packages(pscl)
install.packages('pscl')
install.packages('Rtools')
install.packages('pscl')
summary(m1 <- zeroinfl(Calves.sired ~ Year.of.rut | Sire.age, data = zinb))
library(pscl)
summary(m1 <- zeroinfl(Calves.sired ~ Year.of.rut | Sire.age, data = data))
summary(m1 <- zeroinfl(Calves.sired ~ Year.of.rut | Sire.age..years, data = data))
summary(m1 <- zeroinfl(Calves.sired ~ Year.of.rut | Sire.age..years., data = data))
View(m1)
m1$coefficients
m1
m1(2)
m1
plot(m1)
summary(m1)
m1
m1$coefficients
m1$fitted.values
m1$optim
m1$model
m1$y
View(m1)
m1
?? maxlogL
install.packages('maxlogL')
(one + .43 + .22  .58 + .47) / 5
one <- (.06 + .83)/2
(one + .43 + .22  .58 + .47) / 5
(one + .43 + .22  + .58 + .47) / 5
(.61 + .43 + .22  + .58 + .47) / 5
data <- read.csv(file = 'offspring info.csv')
data <- data[!is.na(data[,1]),]
setwd("~/GitHub/IntrogressedAllele/R")
data <- read.csv(file = 'offspring info.csv')
data <- data[!is.na(data[,1]),]
data <- read.csv(file = 'data/offspring info.csv')
data <- data[!is.na(data[,1]),]
xbar <- mean(data$Calves.sired)
ssqr <- var(data$Calves.sired)
data <- read.csv(file = 'data/offspring info.csv')
data <- data[!is.na(data[,1]),]
xbar <- mean(data$Calves.sired)
ssqr <- var(data$Calves.sired)
if(xbar >= ssqr){
phihat <- 0
thetahat <- xbar
}else{
phihat <- (ssqr - xbar) / (xbar^2 + ssqr - xbar)
thetahat <- xbar + (ssqr / xbar) - 1
}
phihat
thetahat
