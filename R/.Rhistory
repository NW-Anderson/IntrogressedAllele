c=3
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=4
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=56
c=5
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=6
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=7
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=8
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=9
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
c=10
ssubset <- svals[difs.index[,c]]
total <- total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
total + CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
CompositeSimpsons(svals = ssubset,
derivvals = deriv.array[n,],
secderivvals = secderiv.array[n,])
svals = ssubset
ssubset
derivvals = deriv.array[n,]
secderivvals = secderiv.array[n,]
a <- min(svals)
b <- max(svals)
n <- length(svals) - 1
h <- (b-a)/n
xi0 <- InsideIntegral(s = a,
der = derivvals[which(paste('s =', a) == names(derivvals))],
secder = secderivvals[which(paste('s =', a) == names(secderivvals))])+
InsideIntegral(s = b,
der = derivvals[which(paste('s =', b) == names(derivvals))],
secder = secderivvals[which(paste('s =', b) == names(secderivvals))])
log(inf)
log(0)
if(s == 0) s <- 10^(-25)
xi0 <- InsideIntegral(s = a,
der = derivvals[which(paste('s =', a) == names(derivvals))],
secder = secderivvals[which(paste('s =', a) == names(secderivvals))])+
InsideIntegral(s = b,
der = derivvals[which(paste('s =', b) == names(derivvals))],
secder = secderivvals[which(paste('s =', b) == names(secderivvals))])
InsideIntegral <-  function(s,der,secder){
if(s == 0) s <- 10^(-25)
return(-log(s) * (s * secder + der))
}
xi0 <- InsideIntegral(s = a,
der = derivvals[which(paste('s =', a) == names(derivvals))],
secder = secderivvals[which(paste('s =', a) == names(secderivvals))])+
InsideIntegral(s = b,
der = derivvals[which(paste('s =', b) == names(derivvals))],
secder = secderivvals[which(paste('s =', b) == names(secderivvals))])
source('C:/Users/19726/Desktop/GitHub/IntrogressedAllele/R/Table approach.R')
source('DoMatrix.R')
source('ExactTableApproach.R')
ngen <- 30
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(613,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 613
tol = 10^-3
num = 100
results <- array(dim = c(ngen,3))
colnames(results) <- c('freq', 'time','bins')
rownames(results) <- c(paste('gen =', 1:ngen))
tables <- MakeSeedTable(ngen = ngen, par = par, pop = pop)
for(n in ngen:1){
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num,
tables = tables)
bins <- exact[[1]]
freq <- exact[[2]]
tables <- exact[[3]]
end <- Sys.time()
times <- end - start
results[n,] <- c(freq,times,bins)
}
plot(aprx, type = 'l', xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(results[,1], col = 'red', lwd = 2)
secderiv.array <- FindDerivs(tables$dPsi.array)
sorted.dPsi.array <- SortTable(tables$dPsi.array)
svals <- sorted.dPsi.array[[2]]
sorted.dPsi.array <- sorted.dPsi.array[[1]]
plot(svals,sorted.dPsi.array[ngen,], type = 'l')
lines(svals, secderiv.array[ngen,], lwd = .5, col = 'blue')
var.part.1 <- 1/(1-tables$Psi.array[n,1])* CompositeSimpsonsWrapper(deriv.array = sorted.dPsi.array, secderiv.array, svals)
Psi.array = SortTable(tables$dPsi.array)
Psi.array[1:5,1:5]
Psi.array = SortTable(tables$dPsi.array)[[1]]
Psi.array[1:5,1:5]
source('C:/Users/19726/Desktop/GitHub/IntrogressedAllele/R/Table approach.R')
source('DoMatrix.R')
source('ExactTableApproach.R')
ngen <- 30
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(613,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 613
tol = 10^-3
num = 100
results <- array(dim = c(ngen,3))
colnames(results) <- c('freq', 'time','bins')
rownames(results) <- c(paste('gen =', 1:ngen))
tables <- MakeSeedTable(ngen = ngen, par = par, pop = pop)
for(n in ngen:1){
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num,
tables = tables)
bins <- exact[[1]]
freq <- exact[[2]]
tables <- exact[[3]]
end <- Sys.time()
times <- end - start
results[n,] <- c(freq,times,bins)
}
plot(aprx, type = 'l', xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(results[,1], col = 'red', lwd = 2)
secderiv.array <- FindDerivs(tables$dPsi.array)
sorted.dPsi.array <- SortTable(tables$dPsi.array)
svals <- sorted.dPsi.array[[2]]
sorted.dPsi.array <- sorted.dPsi.array[[1]]
plot(svals,sorted.dPsi.array[ngen,], type = 'l')
lines(svals, secderiv.array[ngen,], lwd = .5, col = 'blue')
var.part.1 <- CompositeSimpsonsWrapper(Psi.array = SortTable(tables$dPsi.array)[[1]], deriv.array = sorted.dPsi.array, secderiv.array, svals)
var <- var.part.1 - results[,1]
var <- var.part.1 - (results[,1])^2
var
upper95 <- results[,1] + 2*sqrt(var)
upper95 <- results[,1] + 2*sqrt(var)
lower95 <- results[,1] - 2*sqrt(var)
upper
upper95
lower95
sqrt(var[1])
upper95 <- results[,1] + sqrt(var)
lower95 <- results[,1] - sqrt(var)
upper95 <- results[,1] + sqrt(var)
upper95 <- results[,1] + sqrt(var)
lower95 <- results[,1] - sqrt(var)
upper95
lower95
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations')
legend( x = 'topleft', lwd = 2, legend = c('Expectation','+- 1 std'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = 2, col = 'red')
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','+- 1 std'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = 2, col = 'red')
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','+- 1 std'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = 2, col = 'red')
lines(lower95, lwd = 2, col = 'red')
lwoer95
lower95
ngen <- 80
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(613,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:3])
}
source('DoMatrix.R')
source('ExactTableApproach.R')
temp <- DoMatrixApprox(par = par,
n = n)
temp
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(613,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:4])
}
pp <- pop
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
#      main = 'Population Size Over Time')
plot(pp, type = 'l', xlab = 'Generation', ylab = 'Population Size', lwd = 2,
main = 'Population Size Over Time')
source('DoMatrix.R')
source('ExactTableApproach.R')
ngen <- 80
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(713,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:4])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 713
tol = 10^-3
num = 100
results <- array(dim = c(ngen,3))
colnames(results) <- c('freq', 'time','bins')
rownames(results) <- c(paste('gen =', 1:ngen))
tables <- MakeSeedTable(ngen = ngen, par = par, pop = pop)
for(n in ngen:1){
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num,
tables = tables)
bins <- exact[[1]]
freq <- exact[[2]]
tables <- exact[[3]]
end <- Sys.time()
times <- end - start
results[n,] <- c(freq,times,bins)
}
plot(aprx, type = 'l', xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(results[,1], col = 'red', lwd = 2)
secderiv.array <- FindDerivs(tables$dPsi.array)
sorted.dPsi.array <- SortTable(tables$dPsi.array)
svals <- sorted.dPsi.array[[2]]
sorted.dPsi.array <- sorted.dPsi.array[[1]]
plot(svals,sorted.dPsi.array[ngen,], type = 'l')
lines(svals, secderiv.array[ngen,], lwd = .5, col = 'blue')
var.part.1 <- CompositeSimpsonsWrapper(Psi.array = SortTable(tables$dPsi.array)[[1]], deriv.array = sorted.dPsi.array, secderiv.array, svals)
var <- var.part.1 - (results[,1])^2
upper95 <- results[,1] + sqrt(var)
lower95 <- results[,1] - sqrt(var)
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','+- 1 std'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = 2, col = 'red')
lines(lower95, lwd = 2, col = 'red')
source('DoMatrix.R')
source('ExactTableApproach.R')
ngen <- 80
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(713,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:4])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 713
tol = 10^-3
num = 100
results <- array(dim = c(ngen,3))
colnames(results) <- c('freq', 'time','bins')
rownames(results) <- c(paste('gen =', 1:ngen))
tables <- MakeSeedTable(ngen = ngen, par = par, pop = pop)
for(n in ngen:1){
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num,
tables = tables)
bins <- exact[[1]]
freq <- exact[[2]]
tables <- exact[[3]]
end <- Sys.time()
times <- end - start
results[n,] <- c(freq,times,bins)
}
plot(aprx, type = 'l', xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(results[,1], col = 'red', lwd = 2)
secderiv.array <- FindDerivs(tables$dPsi.array)
sorted.dPsi.array <- SortTable(tables$dPsi.array)
svals <- sorted.dPsi.array[[2]]
sorted.dPsi.array <- sorted.dPsi.array[[1]]
plot(svals,sorted.dPsi.array[ngen,], type = 'l')
lines(svals, secderiv.array[ngen,], lwd = .5, col = 'blue')
var.part.1 <- CompositeSimpsonsWrapper(Psi.array = SortTable(tables$dPsi.array)[[1]], deriv.array = sorted.dPsi.array, secderiv.array, svals)
var <- var.part.1 - (results[,1])^2
upper95 <- results[,1] + sqrt(var)/pp
lower95 <- results[,1] - sqrt(var)/pp
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','+- 1 SE'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = 2, col = 'red')
lines(lower95, lwd = 2, col = 'red')
sqrt(var)/pp
upper95 <- results[,1] + 2 * sqrt(var/pp)
lower95 <- results[,1] - 2 * sqrt(var/pp)
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','+- 1 SE'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = 2, col = 'red')
lines(lower95, lwd = 2, col = 'red')
source('DoMatrix.R')
source('ExactTableApproach.R')
ngen <- 80
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(713,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:4])
}
pp <- pop
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 713
tol = 10^-3
num = 100
results <- array(dim = c(ngen,3))
colnames(results) <- c('freq', 'time','bins')
rownames(results) <- c(paste('gen =', 1:ngen))
tables <- MakeSeedTable(ngen = ngen, par = par, pop = pop)
for(n in ngen:1){
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num,
tables = tables)
bins <- exact[[1]]
freq <- exact[[2]]
tables <- exact[[3]]
end <- Sys.time()
times <- end - start
results[n,] <- c(freq,times,bins)
}
plot(aprx, type = 'l', xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(results[,1], col = 'red', lwd = 2)
secderiv.array <- FindDerivs(tables$dPsi.array)
sorted.dPsi.array <- SortTable(tables$dPsi.array)
svals <- sorted.dPsi.array[[2]]
sorted.dPsi.array <- sorted.dPsi.array[[1]]
plot(svals,sorted.dPsi.array[ngen,], type = 'l')
lines(svals, secderiv.array[ngen,], lwd = .5, col = 'blue')
var.part.1 <- CompositeSimpsonsWrapper(Psi.array = SortTable(tables$dPsi.array)[[1]],
deriv.array = sorted.dPsi.array,
secderiv.array,
svals)
var <- var.part.1 - (results[,1])^2
upper95 <- results[,1] + 2 * sqrt(var/pp)
lower95 <- results[,1] - 2 * sqrt(var/pp)
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','95% CI'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = .5, col = 'red')
lines(lower95, lwd = .5, col = 'red')
source('DoMatrix.R')
source('ExactTableApproach.R')
ngen <- 80
# names(par)<-c(pop, theta.a, phi.a, theta.i, phi.i, theta.n, phi.n, theta.b, phi.b, h, d.m)
par <-        c(713,6,      .69,    1,      .5,     1,      .5,     100,     0,    .05,.57)
# par <-          c(1500,)
aprx <- vector(length = ngen)
pop <- vector(length = ngen)
for(n in 1:ngen){
temp <- DoMatrixApprox(par = par,
n = n)
aprx[n] <- temp[1]
pop[n] <- sum(temp[2:4])
}
pp <- pop
pp
# par <- c(phi_A, phi_I, theta_I, theta_A, phi_N, theta_N, d_M, phi_B, theta_B, h)
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 713
tol = 10^-3
num = 100
results <- array(dim = c(ngen,3))
colnames(results) <- c('freq', 'time','bins')
rownames(results) <- c(paste('gen =', 1:ngen))
tables <- MakeSeedTable(ngen = ngen, par = par, pop = pop)
for(n in ngen:1){
start <- Sys.time()
cat(n,'\n')
exact <- DoExact(n = n,
par = par,
pop = pop,
tol = tol,
num = num,
tables = tables)
bins <- exact[[1]]
freq <- exact[[2]]
tables <- exact[[3]]
end <- Sys.time()
times <- end - start
results[n,] <- c(freq,times,bins)
}
plot(aprx, type = 'l', xlab = 'Generation', ylab = 'frequency', lwd = 2,
main = 'Frequency Over Time')
legend(x = 'topleft', lwd = 2, legend = c('Approx','Exact'), col = c('black','red'),
bty = 'n')
lines(results[,1], col = 'red', lwd = 2)
secderiv.array <- FindDerivs(tables$dPsi.array)
sorted.dPsi.array <- SortTable(tables$dPsi.array)
svals <- sorted.dPsi.array[[2]]
sorted.dPsi.array <- sorted.dPsi.array[[1]]
plot(svals,sorted.dPsi.array[ngen,], type = 'l')
lines(svals, secderiv.array[ngen,], lwd = .5, col = 'blue')
var.part.1 <- CompositeSimpsonsWrapper(Psi.array = SortTable(tables$dPsi.array)[[1]],
deriv.array = sorted.dPsi.array,
secderiv.array,
svals)
var <- var.part.1 - (results[,1])^2
upper95 <- results[,1] + 2 * sqrt(var/pp)
lower95 <- results[,1] - 2 * sqrt(var/pp)
plot(results[,1], lwd = 2, type = 'l', xlab = 'Generation', ylab = 'Frequency', main = 'Frequency over Generations',
ylim = c(0,1))
legend( x = 'topleft', lwd = 2, legend = c('Expectation','95% CI'), col = c('black','red'), bty = 'n')
lines(upper95, lwd = .5, col = 'red')
lines(lower95, lwd = .5, col = 'red')
abline(h = .2)
