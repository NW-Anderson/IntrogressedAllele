varPhi_N.array)
== paste('s =', s))]-1)))
sum <- sum + (num / den)
}
return(sum)
}
for (n in 1:ngen) {
dPsi_M.array[n,1] <- dpsi_M(0, n, par, varPhi_N.array, dvarPhi_N.array)
dPsi_M.array[n,2] <- dpsi_M(0.5, n, par, varPhi_N.array, dvarPhi_N.array)
dPsi_M.array[n,3] <- dpsi_M(1, n, par, varPhi_N.array, dvarPhi_N.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- dpsi_M(0,n,par)
#   check[n,2] <- dpsi_M(0.5,n,par)
#   check[n,3] <- dpsi_M(1,n,par)
# }
##### dPsi #####
dPsi.array <- array(dim = c(ngen, 3))
colnames(dPsi.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(dPsi.array) <- paste('gen = ', 1:ngen, sep = '')
dPsi <- function(s, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array){
term1 <- dvarPhi_I.array[n,
which(colnames(
dvarPhi_I.array)
== paste('s =', s))]*
(varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^pop) *
Psi_M.array[n,
which(colnames(
Psi_M.array)
== paste('s =', s))]
term2 <- varPhi_I.array[n,
which(colnames(
varPhi_I.array)
== paste('s =', s))]* pop*(varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^(pop-1))*
dvarPhi_N.array[n,
which(colnames(
dvarPhi_N.array)
== paste('s =', s))]*Psi_M.array[n,
which(colnames(
Psi_M.array)
== paste('s =', s))]
term3 <- varPhi_I.array[n,
which(colnames(
varPhi_I.array)
== paste('s =', s))]*(varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^pop)* dPsi_M.array[n,
which(colnames(
dPsi_M.array)
== paste('s =', s))]
return(term1 + term2 + term3)
}
for (n in 1:ngen) {
dPsi.array[n,1] <- dPsi(0, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array)
dPsi.array[n,2] <- dPsi(0.5, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array)
dPsi.array[n,3] <- dPsi(1, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array)
}
source('Cleaned Internal Functions.R')
check <- array(dim = c(ngen,3))
colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(check) <- paste('gen = ', 1:ngen, sep = '')
for (n in 1:ngen) {
check[n,1] <- dpsi(0,n,par)
check[n,2] <- dpsi(0.5,n,par)
check[n,3] <- dpsi(1,n,par)
}
for (n in 1:ngen) {
check[n,1] <- dPsi(0,n,pop,par)
check[n,2] <- dPsi(0.5,n,pop,par)
check[n,3] <- dPsi(1,n,pop,par)
}
sum(dPsi.array ==  check)
ngen <- 80
par <-   c(.69,   .5,    1,      6,       .5,     1,      .57,  0,    100,    .05)
pop = 613
tol = 10^-3
num = 100
###############################
start <- Sys.time()
##### varPhi_I #####
varPhi_I.array <- array(dim = c(ngen, 3))
colnames(varPhi_I.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(varPhi_I.array) <- paste('gen = ', 1:ngen, sep = '')
varPhi_I<- function(s, n, par, varPhi_I.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
if(n==1){
return(phi_A + (1-phi_A)*exp(theta_A*(phi_I + (1-phi_I)*exp(theta_I*(s-1))-1)))
}else{
return(phi_A + (1-phi_A)*exp(theta_A*(phi_I + (1-phi_I)*
exp(theta_I*(varPhi_I.array[n-1,
which(colnames(
varPhi_I.array)
== paste('s =', s))]
-1))-1)))
}
}
for (n in 1:ngen) {
varPhi_I.array[n,1] <- varPhi_I(0, n, par, varPhi_I.array)
varPhi_I.array[n,2] <- varPhi_I(0.5, n, par, varPhi_I.array)
varPhi_I.array[n,3] <- varPhi_I(1, n, par, varPhi_I.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- varPhi_I(0,n,par)
#   check[n,2] <- varPhi_I(0.5,n,par)
#   check[n,3] <- varPhi_I(1,n,par)
# }
##### varphi_N #####
varPhi_N.array <- array(dim = c(ngen, 3))
colnames(varPhi_N.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(varPhi_N.array) <- paste('gen = ', 1:ngen, sep = '')
varPhi_N<-function(s, n, par, varPhi_I.array, varPhi_N.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
if(n==1){
return(phi_A+(1-phi_A)*exp(theta_A*(phi_N+(1-phi_N)*exp(theta_N*(s-1))-1)))
}else{
return(phi_A + (1-phi_A)*exp(theta_A*(h*(phi_N+(1-phi_N)*
exp(theta_N*(varPhi_I.array[n-1,
which(
colnames(
varPhi_I.array)
== paste('s =', s))]
-1)))+
(1-h)*(phi_N+(1-phi_N)*
exp(theta_N*
(varPhi_N.array[n-1,
which(colnames(
varPhi_N.array)
== paste('s =', s))]
-1)))-1)))
}
}
for (n in 1:ngen) {
varPhi_N.array[n,1] <- varPhi_N(0, n, par, varPhi_I.array, varPhi_N.array)
varPhi_N.array[n,2] <- varPhi_N(0.5, n, par, varPhi_I.array, varPhi_N.array)
varPhi_N.array[n,3] <- varPhi_N(1, n, par, varPhi_I.array, varPhi_N.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- varPhi_N(0,n,par)
#   check[n,2] <- varPhi_N(0.5,n,par)
#   check[n,3] <- varPhi_N(1,n,par)
# }
##### Psi_M #####
Psi_M.array <- array(dim = c(ngen, 3))
colnames(Psi_M.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(Psi_M.array) <- paste('gen = ', 1:ngen, sep = '')
psi_M<-function(s, n, par, varPhi_N.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
if(n==1){
return(phi_B+(1-phi_B)*exp(theta_B*(s-1)))
}
if(n==2){
return((phi_B+(1-phi_B)*exp(theta_B*(s-1)))*(phi_B+(1-phi_B)*exp(theta_B*(d_M+(1-d_M)*s-1))))
}
if(n>=3){
return((phi_B+(1-phi_B)*exp(theta_B*(s-1)))*(phi_B+(1-phi_B)*exp(theta_B*(d_M+(1-d_M)*s-1)))*
psi_prod_helper(s, n, par, varPhi_N.array))
}
}
psi_prod_helper<-function(s, n, par, varPhi_N.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
i <- 0
prod = 1
while(i<=(n-2)){
i=i+1
prod = prod*(phi_B+(1-phi_B)*exp(theta_B*(d_M+(1-d_M)*varPhi_N.array[i,
which(colnames(
varPhi_N.array)
== paste('s =', s))]
-1)))
}
return(prod)
}
for (n in 1:ngen) {
Psi_M.array[n,1] <- psi_M(0, n, par, varPhi_N.array)
Psi_M.array[n,2] <- psi_M(0.5, n, par, varPhi_N.array)
Psi_M.array[n,3] <- psi_M(1, n, par, varPhi_N.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- psi_M(0,n,par)
#   check[n,2] <- psi_M(0.5,n,par)
#   check[n,3] <- psi_M(1,n,par)
# }
##### Psi #####
Psi.array <- array(dim = c(ngen, 3))
colnames(Psi.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(Psi.array) <- paste('gen = ', 1:ngen, sep = '')
Psi <- function(s, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array){
return(varPhi_I.array[n,
which(colnames(
varPhi_I.array)
== paste('s =', s))]
* varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^pop
* Psi_M.array[n,
which(colnames(
Psi_M.array)
== paste('s =',s))])
}
for (n in 1:ngen) {
Psi.array[n,1] <- Psi(0, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array)
Psi.array[n,2] <- Psi(0.5, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array)
Psi.array[n,3] <- Psi(1, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- Psi(0,n, pop, par)
#   check[n,2] <- Psi(0.5,n, pop, par)
#   check[n,3] <- Psi(1,n, pop, par)
# }
##### dvarPhi_I #####
dvarPhi_I.array <- array(dim = c(ngen, 3))
colnames(dvarPhi_I.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(dvarPhi_I.array) <- paste('gen = ', 1:ngen, sep = '')
dvarPhi_I<-function(s, n, par, varPhi_I.array, dvarPhi_I.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
if(n==1){
return(theta_I*theta_A*(1-phi_A)*(1-phi_I)*exp(theta_A*(phi_I+(1-phi_I)*exp(theta_I*(s-1))-1)+
theta_I*(s-1)))
}else{
return(theta_I*theta_A*(1-phi_A)*(1-phi_I)*dvarPhi_I.array[n-1,
which(colnames(
dvarPhi_I.array)
== paste('s =', s))]
*exp(theta_A*(phi_I+(1-phi_I)*exp(theta_I*(varPhi_I.array[n-1,
which(colnames(
varPhi_I.array)
== paste('s =', s))]-1))-1)+
theta_I*(varPhi_I.array[n-1,
which(colnames(
varPhi_I.array)
== paste('s =', s))]-1)))
}
}
for (n in 1:ngen) {
dvarPhi_I.array[n,1] <- dvarPhi_I(0, n, par, varPhi_I.array, dvarPhi_I.array)
dvarPhi_I.array[n,2] <- dvarPhi_I(0.5, n, par, varPhi_I.array, dvarPhi_I.array)
dvarPhi_I.array[n,3] <- dvarPhi_I(1, n, par, varPhi_I.array, dvarPhi_I.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- dvarPhi_I(0,n,par)
#   check[n,2] <- dvarPhi_I(0.5,n,par)
#   check[n,3] <- dvarPhi_I(1,n,par)
# }
##### dvarPhi_N #####
dvarPhi_N.array <- array(dim = c(ngen, 3))
colnames(dvarPhi_N.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(dvarPhi_N.array) <- paste('gen = ', 1:ngen, sep = '')
dvarPhi_N<-function(s, n, par, varPhi_I.array, varPhi_N.array, dvarPhi_I.array, dvarPhi_N.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
if(n==1){
return((1-phi_A)*theta_A*((1-phi_N)*theta_N*h*exp(theta_N*(s-1)))*exp(theta_A*(phi_N+(1-phi_N)*exp(theta_N*(s-1))-1)))
}else{
return((1-phi_A)*theta_A*(h*(1-phi_N)*theta_N*dvarPhi_I.array[n-1,
which(colnames(
dvarPhi_I.array)
== paste('s =', s))]
*exp(theta_N*(varPhi_I.array[n-1,
which(colnames(
varPhi_I.array)
== paste('s =', s))]-1))+
(1-h)*(1-phi_N)*theta_N*dvarPhi_N.array[n-1,
which(colnames(
dvarPhi_N.array)
== paste('s =', s))]
*exp(theta_N*(varPhi_N.array[n-1,
which(colnames(
varPhi_N.array)
== paste('s =', s))]-1)))
*exp(theta_A*(h*(phi_N+(1-phi_N)*exp(theta_N*(varPhi_I.array[n-1,
which(colnames(
varPhi_I.array)
== paste('s =', s))]-1)))+
(1-h)*(phi_N+(1-phi_N)*exp(theta_N*(varPhi_N.array[n-1,
which(colnames(
varPhi_N.array)
== paste('s =', s))]-1)))-1)))
}
}
for (n in 1:ngen) {
dvarPhi_N.array[n,1] <- dvarPhi_N(0, n, par, varPhi_I.array, varPhi_N.array, dvarPhi_I.array, dvarPhi_N.array)
dvarPhi_N.array[n,2] <- dvarPhi_N(0.5, n, par, varPhi_I.array, varPhi_N.array, dvarPhi_I.array, dvarPhi_N.array)
dvarPhi_N.array[n,3] <- dvarPhi_N(1, n, par, varPhi_I.array, varPhi_N.array, dvarPhi_I.array, dvarPhi_N.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- dvarPhi_N(0,n,par)
#   check[n,2] <- dvarPhi_N(0.5,n,par)
#   check[n,3] <- dvarPhi_N(1,n,par)
# }
##### dPsi_M #####
dPsi_M.array <- array(dim = c(ngen, 3))
colnames(dPsi_M.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(dPsi_M.array) <- paste('gen = ', 1:ngen, sep = '')
dpsi_M<-function(s, n, par, varPhi_N.array, dvarPhi_N.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
if(n <= 2){
return(0)
}
if(n >= 3){
return((phi_B+(1-phi_B)*exp(theta_B*(s-1)))*(phi_B+(1-phi_B)*exp(theta_B*(d_M+(1-d_M)*s-1)))*
psi_sum(s, n, par, varPhi_N.array, dvarPhi_N.array))
}
}
psi_sum <- function(s, n, par, varPhi_N.array, dvarPhi_N.array){
phi_A <- par[1]
phi_I <- par[2]
theta_I <- par[3]
theta_A <- par[4]
phi_N <- par[5]
theta_N <- par[6]
d_M <- par[7]
phi_B <- par[8]
theta_B <- par[9]
h <- par[10]
i <- 0
sum = 0
while(i<=(n-2)){
i = i+1
num <- ((1-phi_B)*theta_B*(1-d_M)*dvarPhi_N.array[i,
which(colnames(
dvarPhi_N.array)
== paste('s =', s))]
*exp(theta_B*(d_M+(1-d_M)*varPhi_N.array[i,
which(colnames(
varPhi_N.array)
== paste('s =', s))]-1)))*psi_prod_helper(s, n, par, varPhi_N.array)
den <- (phi_B+(1-phi_B)*exp(theta_B*(d_M+(1-d_M)*varPhi_N.array[i,
which(colnames(
varPhi_N.array)
== paste('s =', s))]-1)))
sum <- sum + (num / den)
}
return(sum)
}
for (n in 1:ngen) {
dPsi_M.array[n,1] <- dpsi_M(0, n, par, varPhi_N.array, dvarPhi_N.array)
dPsi_M.array[n,2] <- dpsi_M(0.5, n, par, varPhi_N.array, dvarPhi_N.array)
dPsi_M.array[n,3] <- dpsi_M(1, n, par, varPhi_N.array, dvarPhi_N.array)
}
# source('Cleaned Internal Functions.R')
# check <- array(dim = c(ngen,3))
# colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
# rownames(check) <- paste('gen = ', 1:ngen, sep = '')
# for (n in 1:ngen) {
#   check[n,1] <- dpsi_M(0,n,par)
#   check[n,2] <- dpsi_M(0.5,n,par)
#   check[n,3] <- dpsi_M(1,n,par)
# }
##### dPsi #####
dPsi.array <- array(dim = c(ngen, 3))
colnames(dPsi.array) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(dPsi.array) <- paste('gen = ', 1:ngen, sep = '')
dPsi <- function(s, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array){
term1 <- dvarPhi_I.array[n,
which(colnames(
dvarPhi_I.array)
== paste('s =', s))]*
(varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^pop) *
Psi_M.array[n,
which(colnames(
Psi_M.array)
== paste('s =', s))]
term2 <- varPhi_I.array[n,
which(colnames(
varPhi_I.array)
== paste('s =', s))]* pop*(varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^(pop-1))*
dvarPhi_N.array[n,
which(colnames(
dvarPhi_N.array)
== paste('s =', s))]*Psi_M.array[n,
which(colnames(
Psi_M.array)
== paste('s =', s))]
term3 <- varPhi_I.array[n,
which(colnames(
varPhi_I.array)
== paste('s =', s))]*(varPhi_N.array[n,
which(colnames(
varPhi_N.array)
== paste('s =', s))]^pop)* dPsi_M.array[n,
which(colnames(
dPsi_M.array)
== paste('s =', s))]
return(term1 + term2 + term3)
}
for (n in 1:ngen) {
dPsi.array[n,1] <- dPsi(0, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array)
dPsi.array[n,2] <- dPsi(0.5, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array)
dPsi.array[n,3] <- dPsi(1, n, pop, par, varPhi_I.array, varPhi_N.array, Psi_M.array, dvarPhi_I.array, dvarPhi_N.array, dPsi_M.array)
}
end <- Sys.time()
new <- end - start
start <- Sys.time()
source('Cleaned Internal Functions.R')
check <- array(dim = c(ngen,3))
colnames(check) <- paste('s = ', c('0','0.5', '1'), sep = '')
rownames(check) <- paste('gen = ', 1:ngen, sep = '')
for (n in 1:ngen) {
check[n,1] <- dPsi(0,n,pop,par)
check[n,2] <- dPsi(0.5,n,pop,par)
check[n,3] <- dPsi(1,n,pop,par)
}
end <- Sys.time()
old <- end - start
old
new
(new - old) / old
(new - old)
